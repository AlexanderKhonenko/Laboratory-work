/*
 Задача:
 *  Создать абстрактный класс Vehicle (транспортные средство). На его основе реализовать классы Plane (самолет), Car (автомобиль) и Ship (корабль). 
 *  Классы должны иметь возможность задавать и получить координаты и параметры средств передвижения (цена, скорость, год выпуска и т. п.) с 
 *  помощью свойств. Для самолета должна быть определена высота, для самолета и корабля - количество пассажиров, для корабля - порт приписки. 
 *  Динамические характеристики задать с помощью методов.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Vehicle
{

    class Program
    {

        static void Main()
        {
            List<Vehicle> cars = new List<Vehicle>(5);
            const int n = 3;
            Vehicle[] garage = new Vehicle[n];
            garage[0] = new Vehicle(0, 0);
            garage[1] = new Vehicle(242, 214);
            garage[2] = new Vehicle(421, 491);
            Array.Sort(garage);
            output();
        }

        private static void output()
        {
            Console.WriteLine("****Самолёт****");
            Console.WriteLine("Характеристики самолёта");
            var plane = new Plane(200) { Year = 2001, Price = 10000000, Height = 10000, Passengers = 150, Speed = 900 };
            Console.WriteLine("Год выпуска: {0}", plane.Year.ToString());
            Console.WriteLine("Стоимость самолёта: {0}", plane.Price.ToString());
            Console.WriteLine("Высота полёта {0}:", plane.Height.ToString());
            Console.WriteLine("Число пассажиров: {0}", plane.Passengers.ToString());
            Console.WriteLine("Скорость {0}:", plane.Speed.ToString());
            Console.WriteLine("***************");
            Console.WriteLine("****Машина****");
            Console.WriteLine("Характеристики Машина");
            var car = new Car(60) { Price = 50000, Year = 1996, Speed = 250 };
            car.Coordinate(242, 214);
            Console.WriteLine("Стоимость машины {0}:", car.Price.ToString());
            Console.WriteLine("Координаты машины X:{0},Y: {1}", car.CoordinateX.ToString(), car.CoordinateY.ToString());
            Console.WriteLine("Год выпуска: {0}", car.Year.ToString());
            Console.WriteLine("Стоимость машины {0}:", car.Price.ToString());
            Console.WriteLine("Скорость {0}:", car.Speed.ToString());
            var ship = new Ship(20) { Price = 5000000, Year = 1986, Speed = 95, Port = "Порт Артур" };
            ship.Coordinate(421, 491);
            Console.WriteLine("***************");
            Console.WriteLine("****Корабль****");
            Console.WriteLine("Характеристики корабля");
            Console.WriteLine("Стоимость корабля {0}:", ship.Price.ToString());
            Console.WriteLine("Координаты машины X:{0},Y: {1}", ship.CoordinateX.ToString(), ship.CoordinateY.ToString());
            Console.WriteLine("Год выпуска: {0}", ship.Year.ToString());
            Console.WriteLine("Стоимость машины {0}:", ship.Price.ToString());
            Console.WriteLine("Скорость {0}:", ship.Speed.ToString());
            Console.WriteLine("Порт приписки {0}:", ship.Port.ToString());
            Console.ReadKey();
        }
    }



    interface Iresore
    {
        void SpeedMethod(double Speed);
    }
    internal class Vehicle : IComparable
    {
        private double coordinateX, coordinateY;
        private double price, speed, year_of_construction;
        private int v1;
        private char v2;
        private int v;

        public static bool operator <(Vehicle s1, Vehicle s2)
        {
            return s1.CoordinateX < s2.CoordinateX;
        }
        public static bool operator >(Vehicle s1, Vehicle s2)
        {
            return s1.CoordinateX > s2.CoordinateX;
        }
        public double CoordinateX
        {
            get { return coordinateX; }
            set { coordinateX = value; }
        }

        public double CoordinateY
        {
            get { return coordinateY; }
            set { coordinateY = value; }
        }

        public double Price
        {
            get { return price; }
            set { price = value; }
        }

        public double Speed
        {
            get { return speed; }
            set { speed = value; }
        }

        public double Year
        {
            get { return year_of_construction; }
            set { year_of_construction = value; }
        }


        public void Coordinate(double CoordinateX, double CoordinateY)
        {
            this.CoordinateX = CoordinateX;
            this.coordinateY = CoordinateY;
        }


        public void SpeedMethod(double Speed)
        {
            this.Speed = Speed;
        }

        public int CompareTo(object obj)
        {
            Vehicle temp = (Vehicle)obj;
            if (this.CoordinateX > this.CoordinateX) return 1;
            if (this.CoordinateX < this.CoordinateX) return -1;
            return 0;
        }

        public Vehicle(double Speed)
        {

            this.Speed = Speed;
        }

        public Vehicle(double Speed, int v1, char v2) : this(Speed)
        {
            this.v1 = v1;
            this.v2 = v2;
        }

        public Vehicle(double Speed, int v) : this(Speed)
        {
            this.v = v;
        }
    }


    class Plane : Vehicle, Iresore
    {
        public double Height { get; set; }
        public double Passengers { get; set; }

        public Plane(double Speed)
            : base(Speed)
        {
            Height = 300;
            Passengers = 100;
        }
    }

    class Ship : Vehicle, Iresore
    {
        public double Passengers { get; set; }
        public string Port { get; set; }
        public Ship(double Speed)
            : base(Speed)
        {
            Passengers = 500;
            Port = "порт 1";
        }
    }

    class Car : Vehicle, Iresore
    {
        public Car(double Speed)
            : base(Speed)
        {

        }

    }
}
