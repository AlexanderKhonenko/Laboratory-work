/*Выполнить задания 4, 5, 6, 7 используя динамическое выделение памяти.*/

//Задание 4

//Размерность массива задать именованной константой.
//
//Вариант 15
//1. Найти сумму положительных элементов массива.
//2. Найти произведение элементов массива, расположенных между максимальным и минимальным элементами.
//3. Упорядочить массив по убыванию модулей элементов.
#include <iostream>
#include <locale>
#include <math.h>
#include <windows.h>
#include "zadanie4.h" 
using namespace std;

int zadanie4() {
	setlocale(LC_ALL, "Rus");
	int N;
	cout << "Введите размерность массива: " << endl; cin >> N;
	int *a;
	int sum = 0;
	a = new int[N];
	cout << " Введите " << N << " целых чисел:" << endl;
	for (int i = 0; i < N; i++) cin >> a[i];
	for (int i = 0; i < N; i++) cout << a[i] << " ";
	cout << "\n" << endl;
	cout << "1. Найти сумму положительных элементов массива" << endl;
	cout << "2. Найти произведение элементов массива, расположенных между максимальным и минимальным элементами." << endl;
	cout << "3. Упорядочить массив по убыванию модулей элементов\n" << endl;
	cout << "Выберите, какую задачу выполнить" << endl;
	char choose = 0;
	cin >> choose;
	switch (choose) {
	case '1':  for (int i = 0; i < N; i++) {
		if (a[i] >= 0)
			sum = sum + a[i];
	}
			   cout << "Сумма элементов равна: " << sum; break;
	case '2': {
		int imax = 0, imin = 0, count = 1;
		for (int i = imax = imin = 0; i < N; i++) {
			if (a[i] > a[imax]) imax = i;
			if (a[i] < a[imin]) imin = i;
		}
		int d = imax < imin ? 1 : imax > imin ? -1 : 0;
		for (int i = imax + d; i != imin; i += d) {
			if (a[i] > 0) count = count * a[i];
		}
		cout << "Произведение равно: " << count << endl; break;
	}
	case '3': {
		for (int j = 0; j < N; j++)
			for (int i = 0; i < N - 1; i++)
				if (abs(a[i]) < abs(a[i + 1]))
					swap(a[i], a[i + 1]);
		for (int i = 0; i < N; i++)
			cout << a[i] << ' '; break;
	}
	}
	delete[] a;
	system("pause");
	return 0;
}

///// Задание 5

#include <iostream>
#include <locale>
#include <iomanip>
#include <windows.h>
#include "zadanie5.h" 
using namespace std;

int zadanie5() {
	setlocale(LC_ALL, "Rus");
	cout << "Введите матрицу " << endl;
	int n = 3;
	int **a = new int*[n];
	for (int i = 0; i < n; i++)a[i] = new int[n];
	int i;
	int j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			cin >> a[i][j];
	for (i = 0; i < 3; i++)  // Вывод предпросмотра
		for (j = 0; j < 3; j++)
			cout << a[i][j] << " ";
	cout << endl;
	int choose;
	cout << "Выберите задачу" << endl;
	cout << "1. Определить номер первого из столбцов, содержащих хотя бы один нулевой элемент." << endl;
	cout << "2. Упорядочивание матрицы." << endl;
	cin >> choose;
	switch (choose) {
	case 1:
		bool all_posit;					// Задача 1
		for (j = 0; j < 3; j++) {
			all_posit = true;
			for (i = 0; i < 3; i++)
				if (a[i][j] == 0) { cout << "Номер столбца: " << j; }
		}
		break;
	case 2:
		long *sum = new long[i];		// массив сумм отрицательных элементов строк
		for (i = 0; i < 3; i++) {
			sum[i] = 0;
			for (int j = 0; j < 3; j += 2)
				if (a[i][j] < 0)
					sum[i] += a[i][j];
		}
		for (i = 0; i < 3; i++) {		// контрольный вывод
			for (int j = 0; j < 3; j++) cout << setw(4) << a[i][j] << " ";
			cout << "| " << sum[i] << endl;
		}
		cout << "\n" << endl;
		for (int i = 0; i < 3 - 1; i++) { // упорядочивание матрицы
			int nmin = i;
			for (int j = i + 1; j < 3; j++)
				if (sum[j] < sum[nmin]) nmin = j;
			long buf_sum = sum[i]; sum[i] = sum[nmin]; sum[nmin] = buf_sum;
			for (int j = 0; j < 3; j++) {
				int buf_a = a[i][j]; a[i][j] = a[nmin][j]; a[nmin][j] = buf_a;
			}
		}
		cout << "Упорядоченная матрица" << endl;
		for (int i = 0; i < 3; i++) { // вывод упорядоченной матрицы
			for (int j = 0; j < 3; j++) cout << setw(4) << a[i][j] << " ";
			cout << endl;
		}
	}
	delete[] * a;
	system("pause");
	return 0;
}

// Задание 6

#include <iostream> 
#include <fstream> 
#include <locale>
#include <string>
#include <windows.h>
#include "zadanie6.h"
#pragma warning(disable : 4996)
//#define _CRT_SECURE_NO_WARNINGS
using namespace std;

int zadanie6() {
	setlocale(LC_ALL, "Rus");
	cout << "Написать программу, которая считывает текст из файла," << endl;
	cout << "находит самое длинное слово и определяет, " << endl;
	cout << "сколько раз оно встретилось в тексте." << endl;
	ifstream fin("Text.txt", ios::in | ios::binary);
	if (!fin) {
		cout << "Файл не найден" << endl;
		return 0;
	}
	fin.seekg(0, ios::end);
	long len = fin.tellg();
	char *maxword = new char[len + 1];
	char *word = new char[len + 1];
	char *buf = new char[len + 1];
	fin.seekg(0, ios::beg);
	fin.read(buf, len);
	buf[len] = '\0';
	int i = 0, j = 0, k = 0, l = 0, wordlen = 0, maxwordlen = 0, wordcnt = 0;
	while (buf[i]) {
		if (isalpha(buf[i])) {
			while (!(ispunct(buf[i]) || isspace(buf[i]) || (buf[i] == '\0'))) word[j++] = buf[i++];
			word[j] = '\0';
			j = 0;
			wordlen = strlen(word);
			cout << word;
			if (wordlen > maxwordlen) {
				maxwordlen = wordlen;
				strcpy(maxword, word); 
			}
			k = l = wordcnt = 0;
			while (buf[k])	{
				if (isalpha(buf[k])){
					while (!(ispunct(buf[k]) || isspace(buf[k]) || (buf[k] == '\0'))) word[l++] = buf[k++];
					word[l] = '\0';
					l = 0;
					if (strcmp(maxword, word) == 0) wordcnt++;
				}
				k++;
			}
		}
		cout << buf[i];
		i++;
	}
	fin.close();
	cout << endl;
	cout << "Самое длинное слово: " << maxword << endl;
	cout << "Длина слова: " << maxwordlen << endl;
	cout << "Количество cлова: " << wordcnt << endl;
	delete[] maxword;
	delete[] word;
	delete[] buf;
	system("pause");
	return 0;
}


/// задание 7

#include <windows.h>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <cstdio>
#include <iomanip>
#include "zadanie7.h"
using namespace std;

int zadanie7() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	ZNAK *dbase = new ZNAK[l_dbase];
	int day, month, year;
	for (int i = 0; i < l_dbase; i++)
	{
		cout << "****************************" << endl;
		cout << "Запись номер " << i << endl;
		cout << "Введите Имя" << endl;
		cin.getline(dbase[i].firstName, l_name);

		cout << "Введите Фамилию" << endl;

		cin.getline(dbase[i].lastName, l_name);
		cout << "Введите знак зодиака" << endl;

		cin.getline(dbase[i].znakzodi, l_znakzodi);
		vvod_i_proverka_vremeni(day, month, year);
		dbase[i].birthday.day = day;
		dbase[i].birthday.month = month;
		dbase[i].birthday.year = year;
	}
	sort(dbase);
	cout << "Сортированные записи:" << endl;
	for (int i = 0; i < l_dbase; i++) {
		cout << dbase[i].firstName << ' ' << dbase[i].lastName << ' ' << dbase[i].znakzodi << "	";
		cout << dbase[i].birthday.day << "." << dbase[i].birthday.month << "." << dbase[i].birthday.year << endl;
	}
	////////////////////////////////////////////////////
	poisk_female(dbase);
	delete[] dbase;
	system("pause");
	return 0;
}

void sort(ZNAK *dbase) {
	bool sort = false;
	ZNAK buffer;
	while (sort) {
		sort = 0;
		for (int i = 0; i < l_dbase; i++) {
			if (dbase[i].birthday.year > dbase[i + 1].birthday.year) {
				buffer = dbase[i];
				dbase[i] = dbase[i + 1];
				dbase[i + 1] = buffer;
				sort = 1;
			}
			if (dbase[i].birthday.year == dbase[i + 1].birthday.year) {
				if (dbase[i].birthday.month > dbase[i + 1].birthday.month) {
					buffer = dbase[i];
					dbase[i] = dbase[i + 1];
					dbase[i + 1] = buffer;
					sort = 1;
				}
				else if ((dbase[i].birthday.year == dbase[i + 1].birthday.year) && (dbase[i].birthday.month == dbase[i + 1].birthday.month) && (dbase[i].birthday.day > dbase[i + 1].birthday.day)) {
					buffer = dbase[i];
					dbase[i] = dbase[i + 1];
					dbase[i + 1] = buffer;
					sort = 1;
				}
			}

		}
	}
}
void poisk_female(ZNAK *dbase) {
	char *female = new char[l_name + 1];
	bool not_found = true;
	while (true) {
		cout << "Введите фамилию: " << endl;
		cin >> female;
		cin.get();
		for (int i = 0; i < l_dbase; i++) {
			if (strcmp(dbase[i].lastName, female) == 0) {
				cout << "Найденная запись: " << endl;
				cout << dbase[i].firstName << ' ' << dbase[i].lastName << ' ' << dbase[i].znakzodi << " "; cout << dbase[i].birthday.day << "." <<
					dbase[i].birthday.month << "." << dbase[i].birthday.year << endl;
				not_found = false;
			}
		}
		if (not_found) cout << "Людей с такой фамилией нет" << endl;

	}
}
bool vvod_i_proverka_vremeni(int &day, int &month, int &year) {
	char *birthday = new char[l_birthday + 1];
	char temp1[4], temp2[4], temp3[4];
	do {
		cout << "Введите дату рождения в формате ДД.ММ.ГГ или end" << endl;
		cin >> birthday;
		cin.get();
		if (strcmp(birthday, "end") == 0) {
			return 0;
		}
		strncpy_s(temp1, birthday, 2);
		strncpy_s(temp2, &birthday[3], 2);
		strncpy_s(temp3, &birthday[6], 2);
		day = atoi(temp1);

		month = atoi(temp2);
		year = atoi(temp3);

	} while (!(day > 0 && day < 32 && month > 0 && month < 13));
	return 1;
}



